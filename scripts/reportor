#!/usr/bin/env python
import os
from datetime import datetime

import logging
log = logging.getLogger(__name__)

import lockfile

from reportor import parse_manifest, run_manifest

def main():
    import argparse
    parser = argparse.ArgumentParser()
    parser.set_defaults(
        log_level=logging.INFO,
    )
    parser.add_argument("-v", "--verbose", action="store_const", const=logging.DEBUG, dest="log_level")
    parser.add_argument("-q", "--quiet", action="store_const", const=logging.WARN, dest="log_level")
    parser.add_argument("-o", "--output-dir", dest="output_dir", required=True)
    parser.add_argument("-m", "--manifest", dest="manifest", required=True)
    parser.add_argument("-d", "--date", dest="date", type=int, help="date to use, in epoch time")
    parser.add_argument("-l", "--logfile", dest="logfile")
    parser.add_argument("-s", "--symlink", dest="symlink")
    parser.add_argument(dest='when', nargs='+')

    options = parser.parse_args()

    # Set umask so our files are readable by everyone
    os.umask(0o022)

    # TODO: add global locking to prevent running on top of ourselves?
    # TODO: create index for all reports run in output_dir?
    # TODO: Allow running outside of this directory
    # TODO: common libs for credentials
    # TODO: common flot, jquery?
    # TODO: Set cwd be the output_dir?
    # TODO: support atomic writes
    # TODO: make it easy to refer to previous report's output
    if options.date:
        now = datetime.utcfromtimestamp(options.date)
    else:
        now = datetime.utcnow()
    output_dir = os.path.abspath(now.strftime(options.output_dir))

    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    if not options.logfile:
        logging.basicConfig(level=options.log_level, format="%(asctime)s - %(message)s")
    else:
        logfile = os.path.join(output_dir, options.logfile)
        logging.basicConfig(level=options.log_level, format="%(asctime)s - %(message)s", filename=logfile)

    try:
        lock = lockfile.FileLock(options.manifest)
        log.debug("acquiring lock")
        lock.acquire(timeout=60)
    except lockfile.LockTimeout:
        log.warn("Couldn't acquire lock")
        raise SystemExit(-1)

    try:
        m = parse_manifest(open(options.manifest), options.when)
        log.debug("manifest: %s", m)
        manifest_dir = os.path.abspath(os.path.dirname(options.manifest))
        log.debug("chdir to %s", manifest_dir)
        os.chdir(manifest_dir)
        run_manifest(m, output_dir, now)

        if options.symlink:
            # Add a symlink from 
            log.debug("%s -> %s", output_dir, options.symlink)
            try:
                if os.path.exists(options.symlink):
                    os.unlink(options.symlink)
                os.symlink(os.path.abspath(output_dir), options.symlink)
            except OSError:
                log.error("Couldn't update symlink %s", options.symlink, exc_info=True)
    finally:
        lock.release()

if __name__ == '__main__':
    main()
